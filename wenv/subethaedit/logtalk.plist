<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>

	<key>Header</key>
	<dict>
	    <key>Name</key>
		<string>Logtalk</string>
		<key>Extensions</key>
		<string>lgt,loader</string>
		<key>Valid Characters for Variables</key>
		<string>_0987654321abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ</string>
	</dict>
	
    <key>Styles</key>
	<array>

		<dict>
			<key>Name</key>
			<string>Variables</string>
			<key>Color</key>
			<array>
				<real>0.275</real>
				<real>0.275</real>
				<real>0.275</real>
			</array>
			<key>Multiline</key>
			<false/>
			<key>Regular Expressions</key>
			<array>
		      	<string>[^[:lower:]]([A-Z_][A-Za-z0-9_]*)[^[:alnum:]]</string>
			</array>
		</dict>

		<dict>
			<key>Name</key>
			<string>Directives</string>
			<key>Color</key>
			<array>
				<real>0.408</real>
				<real>0.220</real>
				<real>0.129</real>
			</array>
			<key>Multiline</key>
			<false/>
			<key>Regular Expressions</key>
			<array>
				<string>\:\-[[:space:]](object)</string>			
				<string>\:\-[[:space:]](end_object)\.</string>			
				<string>\:\-[[:space:]](protocol)</string>			
				<string>\:\-[[:space:]](end_protocol)\.</string>			
				<string>\:\-[[:space:]](category)</string>			
				<string>\:\-[[:space:]](end_category)\.</string>			
				<string>\:\-[[:space:]](initialization)\(</string>			
				<string>\:\-[[:space:]](info)\(</string>			
				<string>\:\-[[:space:]](mode)\(</string>			
				<string>\:\-[[:space:]](dynamic)\(</string>			
				<string>\:\-[[:space:]](dynamic)\.</string>			
				<string>\:\-[[:space:]](discontiguous)\(</string>			
				<string>\:\-[[:space:]](public)\(</string>			
				<string>\:\-[[:space:]](protected)\(</string>			
				<string>\:\-[[:space:]](private)\(</string>			
				<string>\:\-[[:space:]](metapredicate)\(</string>			
				<string>\:\-[[:space:]](op)\(</string>			
				<string>\:\-[[:space:]](calls)\(</string>			
				<string>\:\-[[:space:]](uses)\(</string>			
			</array>
		</dict>

		<dict>
			<key>Name</key>
			<string>Entity Relations</string>
			<key>Color</key>
			<array>
				<real>0.408</real>
				<real>0.220</real>
				<real>0.129</real>
			</array>
			<key>Multiline</key>
			<false/>
			<key>Regular Expressions</key>
			<array>
				<string>(instantiates)\(</string>
				<string>(specializes)\(</string>
				<string>(extends)\(</string>
				<string>(imports)\(</string>
				<string>(implements)\(</string>
			</array>
		</dict>

		<dict>
			<key>Name</key>
			<string>Message Sending Operators</string>
			<key>Color</key>
			<array>
				<real>0.000</real>
				<real>0.000</real>
				<real>1.000</real>
			</array>
			<key>Multiline</key>
			<false/>
			<key>Regular Expressions</key>
			<array>
				<string>::</string>			
				<string>\^\^</string>			
			</array>
		</dict>

		<dict>
			<key>Name</key>
			<string>External Call</string>
			<key>Color</key>
			<array>
				<real>0.000</real>
				<real>0.000</real>
				<real>1.000</real>
			</array>
			<key>Multiline</key>
			<false/>
			<key>Regular Expressions</key>
			<array>
		      	<string>{</string>
                <string>}</string>
			</array>
		</dict>

		<dict>
			<key>Name</key>
			<string>Control Constructs</string>
			<key>Color</key>
			<array>
				<real>0.463</real>
				<real>0.059</real>
				<real>0.298</real>
			</array>
			<key>Multiline</key>
			<false/>
			<key>Regular Expressions</key>
			<array>
				<string>(call)\(</string>
				<string>(catch)\(</string>
				<string>(throw)\(</string>
				<string>(true)</string>
				<string>(fail)</string>
			</array>
		</dict>

		<dict>
			<key>Name</key>
			<string>Built-in Methods</string>
			<key>Color</key>
			<array>
				<real>0.463</real>
				<real>0.059</real>
				<real>0.298</real>
			</array>
			<key>Multiline</key>
			<false/>
			<key>Regular Expressions</key>
			<array>
				<string>(parameter)\(</string>
				<string>(self)\(</string>
				<string>(sender)\(</string>
				<string>(this)\(</string>
				<string>(current_predicate)\(</string>
				<string>(predicate_property)\(</string>
				<string>(abolish)\(</string>
				<string>(asserta)\(</string>
				<string>(assertz)\(</string>
				<string>(clause)\(</string>
				<string>(retract)\(</string>
				<string>(retractall)\(</string>
				<string>(bagof)\(</string>
				<string>(findall)\(</string>
				<string>(forall)\(</string>
				<string>(setof)\(</string>
				<string>(before)\(</string>
				<string>(after)\(</string>
				<string>(phrase)\(</string>
			</array>
		</dict>

		<dict>
			<key>Name</key>
			<string>Built-in Predicates</string>
			<key>Color</key>
			<array>
				<real>0.463</real>
				<real>0.059</real>
				<real>0.298</real>
			</array>
			<key>Multiline</key>
			<false/>
			<key>Regular Expressions</key>
			<array>
				<string>(current_object)\(</string>
				<string>(current_protocol)\(</string>
				<string>(current_category)\(</string>
				<string>(create_object)\(</string>
				<string>(create_protocol)\(</string>
				<string>(create_category)\(</string>
				<string>(object_property)\(</string>
				<string>(protocol_property)\(</string>
				<string>(category_property)\(</string>
				<string>(abolish_object)\(</string>
				<string>(abolish_protocol)\(</string>
				<string>(abolish_category)\(</string>
				<string>(extends_object)\(</string>
				<string>(extends_protocol)\(</string>
				<string>(implements_protocol)\(</string>
				<string>(instantiates_object)\(</string>
				<string>(specializes_object)\(</string>
				<string>(imports_category)\(</string>
				<string>(abolish_events)\(</string>
				<string>(current_event)\(</string>
				<string>(define_events)\(</string>
				<string>(current_logtalk_flag)\(</string>
				<string>(set_logtalk_flag)\(</string>
				<string>(logtalk_compile)\(</string>
				<string>(logtalk_load)\(</string>
				<string>(forall)\(</string>
				<string>(logtalk_version)\(</string>
				<string>(retractall)\(</string>
			</array>
		</dict>

		<dict>
			<key>Name</key>
			<string>Other Built-in Predicates</string>
			<key>Color</key>
			<array>
				<real>0.463</real>
				<real>0.059</real>
				<real>0.298</real>
			</array>
			<key>Multiline</key>
			<false/>
			<key>Regular Expressions</key>
			<array>
				<!-- Term unification -->
				<string>[[:space:]]+(=)[[:space:]]+</string>
				<string>[[:space:]]+(\\=)[[:space:]]+</string>
				<string>(unify_with_occurs_check)\(</string>
				<!-- Term testing -->
				<string>(var)\(</string>
				<string>(atom)\(</string>
				<string>(integer)\(</string>
				<string>(float)\(</string>
				<string>(atomic)\(</string>
				<string>(compound)\(</string>
				<string>(nonvar)\(</string>
				<string>(number)\(</string>
				<!-- Term comparison -->
				<string>[[:space:]]+(==)[[:space:]]+</string>
				<string>[[:space:]]+(\\==)[[:space:]]+</string>
				<string>[[:space:]]+(@=&lt;)[[:space:]]+</string>
				<string>[[:space:]]+(@&lt;)[[:space:]]+</string>
				<string>[[:space:]]+(@&gt;=)[[:space:]]+</string>
				<string>[[:space:]]+(@&gt;)[[:space:]]+</string>
				<!-- Term creation and decomposition -->
				<string>(functor)\(</string>
				<string>(arg)\(</string>
				<string>[[:space:]]+(=\.\.)[[:space:]]+</string>
				<string>(copy_term)\(</string>
				<!-- Arithemtic evaluation -->
				<string>[[:space:]]+(is)[[:space:]]+</string>
				<!-- Arithemtic comparison -->
				<string>[[:space:]]+(=:=)[[:space:]]+</string>
				<string>[[:space:]]+(=\=)[[:space:]]+</string>
				<string>[[:space:]]+(&lt;)[[:space:]]+</string>
				<string>[[:space:]]+(=&lt;)[[:space:]]+</string>
				<string>[[:space:]]+(&gt;)[[:space:]]+</string>
				<string>[[:space:]]+(&gt;=)[[:space:]]+</string>
				<!-- Evaluable functors -->
				<string>[[:space:]]+(\+)[[:space:]]+</string>
				<string>[[:space:]]+(\-)[[:space:]]+</string>
				<string>[[:space:]]+(\*)[[:space:]]+</string>
				<string>[[:space:]]+(//)[[:space:]]+</string>
				<string>[[:space:]]+(/)[[:space:]]+</string>
				<string>[[:space:]]+(rem)[[:space:]]+</string>
				<string>[[:space:]]+(mod)[[:space:]]+</string>
				<string>(rem)\(</string>
				<string>(mod)\(</string>
				<string>(abs)\(</string>
				<string>(sign)\(</string>
				<string>(float_integer_part)\(</string>
				<string>(float_fractional_part)\(</string>
				<string>(float)\(</string>
				<string>(floor)\(</string>
				<string>(truncate)\(</string>
				<string>(round)\(</string>
				<string>(ceiling)\(</string>
				<!-- Other arithemtic functors -->
				<string>[[:space:]]+(\*\*)[[:space:]]+</string>
				<string>(sin)\(</string>
				<string>(cos)\(</string>
				<string>(atan)\(</string>
				<string>(exp)\(</string>
				<string>(log)\(</string>
				<string>(sqrt)\(</string>
				<!-- Bitwise functors -->
				<string>[[:space:]]+(&gt;&gt;)[[:space:]]+</string>
				<string>[[:space:]]+(&lt;&lt;)[[:space:]]+</string>
				<string>[[:space:]]+(/\\)[[:space:]]+</string>
				<string>[[:space:]]+(\\/)[[:space:]]+</string>
				<string>[[:space:]]+(\\)[[:space:]]+</string>
				<!-- Stream selection and control -->
				<string>(current_input)\(</string>
				<string>(current_output)\(</string>
				<string>(set_input)\(</string>
				<string>(set_output)\(</string>
				<string>(open)\(</string>
				<string>(close)\(</string>
				<string>(flush_output)</string>
				<string>(stream_property)\(</string>
				<string>(at_end_of_stream)</string>
				<string>(set_stream_position)\(</string>
				<!-- Character input/output -->
				<string>(get_char)\(</string>
				<string>(get_code)\(</string>
				<string>(peek_char)\(</string>
				<string>(peek_code)\(</string>
				<string>(put_char)\(</string>
				<string>(put_code)\(</string>
				<string>(nl)</string>
				<!-- Byte input/output -->
				<string>(get_byte)\(</string>
				<string>(peek_byte)\(</string>
				<string>(put_byte)\(</string>
				<!-- Term input/output -->
				<string>(read_term)\(</string>
				<string>(read)\(</string>
				<string>(write_term)\(</string>
				<string>(write)\(</string>
				<string>(writeq)\(</string>
				<string>(write_canonical)\(</string>
				<string>(op)\(</string>
				<string>(current_op)\(</string>
				<string>(char_conversion)\(</string>
				<string>(current_char_conversion)\(</string>
				<!-- Logic and control -->
				<string>(\\\+)[[:space:]]+</string>
				<string>(once)\(</string>
				<string>(repeat)</string>
				<!-- Atomic term processing -->
				<string>(atom_length)\(</string>
				<string>(atom_concat)\(</string>
				<string>(sub_atom)\(</string>
				<string>(atom_chars)\(</string>
				<string>(atom_codes)\(</string>
				<string>(char_code)\(</string>
				<string>(number_chars)\(</string>
				<string>(number_codes)\(</string>
				<!-- Implementation defined hooks functions -->
				<string>(set_prolog_flag)\(</string>
				<string>(current_prolog_flag)\(</string>
				<string>(halt)</string>
			</array>
		</dict>

		<dict>
			<key>Name</key>
			<string>Numbers</string>
			<key>Color</key>
			<array>
				<real>0.000</real>
				<real>0.000</real>
				<real>0.404</real>
			</array>
			<key>Multiline</key>
			<false/>
			<key>Plain Strings</key>
			<array>
				<string>[0-9]+\.*[0-9]+([eE][-+][1-9][0-9]*)?</string>
				<string>0b[0-1]+</string>
				<string>0o[0-7]+</string>
				<string>0x[0-9a-fA-F]+</string>
				<string>0'[0-9a-zA-Z]</string>
			</array>
		</dict>

		<dict>
			<key>Name</key>
			<string>Quoted Atoms and Strings</string>
			<key>Color</key>
			<array>
				<real>0.537</real>
				<real>0.075</real>
				<real>0.082</real>
			</array>
			<key>Multiline</key>
			<false/>
			<key>Regular Expressions</key>
			<array>
				<string>'(.+)'</string>
				<string>"(.+)"</string>
			</array>
		</dict>

		<dict>
			<key>Name</key>
			<string>Single Line Comment</string>
			<key>Color</key>
			<array>
				<real>0.137</real>
				<real>0.431</real>
				<real>0.145</real>
			</array>
			<key>Multiline</key>
			<false/>
            <key>Comment</key>
			<true/>
			<key>Regular Expressions</key>
			<array>
				<string>%.*</string>			
			</array>
		</dict>

		<dict>
			<key>Name</key>
			<string>Block Comment</string>
			<key>Color</key>
			<array>
				<real>0.137</real>
				<real>0.431</real>
				<real>0.145</real>
			</array>
			<key>Multiline</key>
			<true/>
            <key>Comment</key>
			<true/>
			<key>Multiline Begin</key>
			<string>/*</string>
			<key>Multiline End</key>
			<string>*/</string>
		</dict>

	</array>

</dict>
</plist>
