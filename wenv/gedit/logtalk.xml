<?xml version='1.0' encoding='utf-8'?>
<snippets language="logtalk">
  <snippet>
    <text><![CDATA[
:- object(${1:Object}).

	:- info([
		version is 1.0,
		author is '$(whoami)',
		date is $(date +%Y/%m/%d),
		comment is '${2:Description}']).

$0

:- end_object.
]]></text>
    <tag>object</tag>
    <description>Prototype</description>
  </snippet>
  <snippet>
    <text><![CDATA[
:- object(${1:Prototype},
	extends(${2:Parent})).

	:- info([
		version is 1.0,
		author is '$(whoami)',
		date is $(date +%Y/%m/%d),
		comment is '${3:Description}']).

$0

:- end_object.
]]></text>
    <description>Prototype with parent</description>
    <tag>object</tag>
  </snippet>
  <snippet>
    <text><![CDATA[
:- object(${1:Prototype},
	implements(${2:Protocol})).

	:- info([
		version is 1.0,
		author is '$(whoami)',
		date is $(date +%Y/%m/%d),
		comment is '${3:Description}']).

$0

:- end_object.
]]></text>
    <description>Prototype with protocol</description>
    <tag>object</tag>
  </snippet>
  <snippet>
    <text><![CDATA[
:- object(${1:Prototype},
	imports(${2:Category})).

	:- info([
		version is 1.0,
		author is '$(whoami)',
		date is $(date +%Y/%m/%d),
		comment is '${3:Description}']).

$0

:- end_object.
]]></text>
    <tag>object</tag>
    <description>Prototype with category</description>
  </snippet>
  <snippet>
    <text><![CDATA[
:- object(${1:Prototype},
	implements(${2:Protocol}),
	imports(${3:Category}),
	extends(${4:Parent})).

	:- info([
		version is 1.0,
		author is '$(whoami)',
		date is $(date +%Y/%m/%d),
		comment is '${5:Description}']).

$0

:- end_object.
]]></text>
    <tag>object</tag>
    <description>Prototype with all</description>
  </snippet>
  <snippet>
    <text><![CDATA[
:- object(${1:Class},
	specializes(${2:Superclass})).

	:- info([
		version is 1.0,
		author is '$(whoami)',
		date is $(date +%Y/%m/%d),
		comment is '${3:Description}']).

$0

:- end_object.
]]></text>
    <tag>class</tag>
    <description>Class</description>
  </snippet>
  <snippet>
    <text><![CDATA[
:- object(${1:Class},
	implements(${2:Protocol}),
	specializes(${3:Superclass})).

	:- info([
		version is 1.0,
		author is '$(whoami)',
		date is $(date +%Y/%m/%d),
		comment is '${4:Description}']).

$0

:- end_object.
]]></text>
    <tag>class</tag>
    <description>Class with protocol</description>
  </snippet>
  <snippet>
    <text><![CDATA[
:- object(${1:Class},
	imports(${2:Category}),
	specializes(${3:Superclass})).

	:- info([
		version is 1.0,
		author is '$(whoami)',
		date is $(date +%Y/%m/%d),
		comment is '${4:Description}']).

$0

:- end_object.
]]></text>
    <tag>class</tag>
    <description>Class with category</description>
  </snippet>
  <snippet>
    <text><![CDATA[
:- object(${1:Class},
	instantiates(${2:Metaclass}),
	specializes(${3:Superclass})).

	:- info([
		version is 1.0,
		author is '$(whoami)',
		date is $(date +%Y/%m/%d),
		comment is '${4:Description}']).

$0

:- end_object.
]]></text>
    <tag>class</tag>
    <description>Class with metaclass</description>
  </snippet>
  <snippet>
    <text><![CDATA[
:- object(${1:Class},
	implements(${2:Protocol}),
	imports(${3:Category}),
	instantiates(${4:Metaclass}),
	specializes(${5:Superclass})).

	:- info([
		version is 1.0,
		author is '$(whoami)',
		date is $(date +%Y/%m/%d),
		comment is '${6:Description}']).

$0

:- end_object.
]]></text>
    <tag>class</tag>
    <description>Class with all</description>
  </snippet>
  <snippet>
    <text><![CDATA[
:- object(${1:Instance},
	instantiates(${2:Class})).

	:- info([
		version is 1.0,
		author is '$(whoami)',
		date is $(date +%Y/%m/%d),
		comment is '${3:Description}']).

$0

:- end_object.
]]></text>
    <tag>instance</tag>
    <description>Instance</description>
  </snippet>
  <snippet>
    <text><![CDATA[
:- object(${1:Instance},
	implements(${2:Protocol}),
	instantiates(${3:Class})).

	:- info([
		version is 1.0,
		author is '$(whoami)',
		date is $(date +%Y/%m/%d),
		comment is '${4:Description}']).

$0

:- end_object.
]]></text>
    <tag>instance</tag>
    <description>Instance with protocol</description>
  </snippet>
  <snippet>
    <text><![CDATA[
:- object(${1:Instance},
	imports(${2:Category}),
	instantiates(${3:Class})).

	:- info([
		version is 1.0,
		author is '$(whoami)',
		date is $(date +%Y/%m/%d),
		comment is '${4:Description}']).

$0

:- end_object.
]]></text>
    <tag>instance</tag>
    <description>Instance with category</description>
  </snippet>
  <snippet>
    <text><![CDATA[
:- object(${1:Instance},
	implements(${2:Protocol}),
	imports(${3:Category}),
	instantiates(${4:Class})).

	:- info([
		version is 1.0,
		author is '$(whoami)',
		date is $(date +%Y/%m/%d),
		comment is '${5:Description}']).

$0

:- end_object.
]]></text>
    <tag>instance</tag>
    <description>Instance with all</description>
  </snippet>
  <snippet>
    <text><![CDATA[
:- category(${1:Category}).

	:- info([
		version is 1.0,
		author is '$(whoami)',
		date is $(date +%Y/%m/%d),
		comment is '${2:Description}']).

$0

:- end_category.
]]></text>
    <tag>category</tag>
    <description>Category</description>
  </snippet>
  <snippet>
    <text><![CDATA[
:- category(${1:Category},
	implements(${2:Protocol})).

	:- info([
		version is 1.0,
		author is '$(whoami)',
		date is $(date +%Y/%m/%d),
		comment is '${3:Description}']).

$0

:- end_category.
]]></text>
    <tag>category</tag>
    <description>Category with protocol</description>
  </snippet>
  <snippet>
    <text><![CDATA[
:- protocol(${1:Protocol}).

	:- info([
		version is 1.0,
		author is '$(whoami)',
		date is $(date +%Y/%m/%d),
		comment is '${2:Description}']).

$0

:- end_protocol.
]]></text>
    <tag>protocol</tag>
    <description>Protocol</description>
  </snippet>
  <snippet>
    <text><![CDATA[
:- protocol(${1:Extended},
	extends(${2:Minimal})).

	:- info([
		version is 1.0,
		author is '$(whoami)',
		date is $(date +%Y/%m/%d),
		comment is '${3:Description}']).

$0

:- end_protocol.
]]></text>
    <tag>protocol</tag>
    <description>Extended protocol</description>
  </snippet>
  <snippet>
    <text><![CDATA[	:- public(${1:Functor}/${2:Arity}).
	:- mode(${1:Functor}(${3:Arguments}), ${4:Solutions}).
	:- info(${1:Functor}/${2:Arity}, [
		comment is '${5:Description}',
		arguments is ['$6'-'$7']]).

$0]]></text>
    <tag>public</tag>
    <description>Public predicate</description>
  </snippet>
  <snippet>
    <text><![CDATA[	:- public(${1:Functor}/0).
	:- mode(${1:Functor}, ${2:Solutions}).
	:- info(${1:Functor}/0, [
		comment is '${3:Description}']).

$0]]></text>
    <tag>public</tag>
    <description>Public protocol (no arguments)</description>
  </snippet>
  <snippet>
    <text><![CDATA[	:- protected(${1:Functor}/${2:Arity}).
	:- mode(${1:Functor}(${3:Arguments}), ${4:Solutions}).
	:- info(${1:Functor}/${2:Arity}, [
		comment is '${5:Description}',
		arguments is ['$6'-'$7']]).

$0]]></text>
    <tag>protected</tag>
    <description>Protected predicate</description>
  </snippet>
  <snippet>
    <text><![CDATA[	:- protected(${1:Functor}/${2:Arity}).
	:- mode(${1:Functor}(${3:Arguments}), ${4:Solutions}).
	:- info(${1:Functor}/${2:Arity}, [
		comment is '${5:Description}',
		arguments is ['$6'-'$7']]).

$0]]></text>
    <tag>protected</tag>
    <description>Protected predicate (no arguments)</description>
  </snippet>
  <snippet>
    <text><![CDATA[	:- private(${1:Functor}/${2:Arity}).
	:- mode(${1:Functor}(${3:Arguments}), ${4:Solutions}).
	:- info(${1:Functor}/${2:Arity}, [
		comment is '${5:Description}',
		arguments is ['$6'-'$7']]).

$0]]></text>
    <tag>private</tag>
    <description>Private predicate</description>
  </snippet>
  <snippet>
    <text><![CDATA[	:- private(${1:Functor}/0).
	:- mode(${1:Functor}, ${2:Solutions}).
	:- info(${1:Functor}/0, [
		comment is '${3:Description}']).

$0]]></text>
    <tag>private</tag>
    <description>Private predicate (no arguments)</description>
  </snippet>
</snippets>
