<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE language SYSTEM "language.dtd">

<language name="Logtalk" version="1.0" kateversion="2.2" section="Sources" extensions="*.lgt" mimetype="text/x-logtalk">

    <highlighting>
        <list name="directives">
        	<!-- Entity directives -->
			<item> category </item>
            <item> object </item>
            <item> protocol </item>
            <item> end_category </item>
            <item> end_object </item>
            <item> end_protocol </item>
 			<!-- Predicate scope directives -->
            <item> public </item>
            <item> protected </item>
            <item> private </item>
			<!-- Other directives -->
            <item> initialization </item>
            <item> info </item>
            <item> mode </item>
            <item> dynamic </item>
            <item> discontiguous </item>
            <item> metapredicate </item>
            <item> op </item>
            <item> calls </item>
            <item> uses </item>
        </list>

        <list name="entity relations">
            <item> extends </item>
            <item> implements </item>
            <item> imports </item>
            <item> instantiates </item>
            <item> specializes </item>
        </list>

        <list name="builtins">
            <item> abolish </item>
            <item> asserta </item>
            <item> assertz </item>
            <item> clause </item>
            <item> retract </item>
            <item> retractall </item>

			<!-- Method execution context -->
            <item> parameter </item>
            <item> this </item>
            <item> self </item>
            <item> sender </item>

            <item> call </item>
            <item> catch </item>
            <item> fail </item>
            <item> throw </item>
            <item> true </item>

			<!-- Event handlers -->
	        <item> after </item>
            <item> before </item>

			<!-- Reflection -->
            <item> current_predicate </item>
            <item> predicate_property </item>

            <item> phrase </item>

            <item> bagof </item>
            <item> findall </item>
            <item> forall </item>
            <item> setof </item>

            <item> current_object </item>
            <item> current_protocol </item>
            <item> current_category </item>

            <item> create_object </item>
            <item> create_protocol </item>
            <item> create_category </item>

            <item> object_property </item>
            <item> protocol_property </item>
            <item> category_property </item>

            <item> abolish_object </item>
            <item> abolish_protocol </item>
            <item> abolish_category </item>

            <item> extends_object </item>
            <item> extends_protocol </item>
            <item> implements_protocol </item>
            <item> instantiates_object </item>
            <item> specializes_object </item>
            <item> imports_category </item>

            <item> abolish_events </item>
            <item> current_event </item>
            <item> define_events </item>

            <item> current_logtalk_flag </item>
            <item> set_logtalk_flag </item>

            <item> logtalk_compile </item>
            <item> logtalk_load </item>

            <item> forall </item>
			<item> retractall </item>
			<!-- Term unification -->
			<item> unify_with_occurs_check </item>
			<!-- Term creation and decomposition -->
			<item> functor </item>
			<item> arg </item>
			<item> copy_term </item>
			<!-- Evaluable functors -->
			<item> rem </item>
			<item> mod </item>
			<item> abs </item>
			<item> sign </item>
			<item> float_integer_part </item>
			<item> float_fractional_part </item>
			<item> float </item>
			<item> floor </item>
			<item> truncate </item>
			<item> round </item>
			<item> ceiling </item>
			<!-- Other arithemtic functors -->
			<item> sin </item>
			<item> cos </item>
			<item> atan </item>
			<item> exp </item>
			<item> log </item>
			<item> sqrt </item>
			<!-- Term testing -->
			<item> var </item>
			<item> atom </item>
			<item> integer </item>
			<item> float </item>
			<item> atomic </item>
			<item> compound </item>
			<item> nonvar </item>
			<item> number </item>
			<!-- Stream selection and control -->
            <item> current_input </item>
            <item> current_output </item>
            <item> set_input </item>
            <item> set_output </item>
            <item> open </item>
            <item> close </item>
            <item> flush_output </item>
            <item> stream_property </item>
            <item> at_end_of_stream </item>
            <item> set_stream_position </item>
			<!-- Character input/output -->
            <item> get_char </item>
            <item> get_code </item>
            <item> peek_char </item>
            <item> peek_code </item>
            <item> put_char </item>
            <item> put_code </item>
            <item> nl </item>
			<!-- Byte input/output -->
            <item> get_byte </item>
            <item> peek_byte </item>
            <item> put_byte </item>
			<!-- Term input/output -->
            <item> read_term </item>
            <item> read </item>
            <item> write_term </item>
            <item> write </item>
            <item> writeq </item>
            <item> write_canonical </item>
            <item> op </item>
            <item> current_op </item>
            <item> char_conversion </item>
            <item> current_char_conversion </item>
			<!-- Atomic term processing -->
            <item> atom_length </item>
            <item> atom_concat </item>
            <item> sub_atom </item>
            <item> atom_chars </item>
            <item> atom_codes </item>
            <item> char_code </item>
            <item> number_chars </item>
            <item> number_codes </item>
			<!-- Implementation defined hooks functions -->
            <item> set_prolog_flag </item>
            <item> current_prolog_flag </item>
            <item> halt </item>
        </list>

        <contexts>

            <context name="normal" attribute="Normal" lineEndContext="#stay">
                <keyword attribute="Built-in" context="#stay" String="builtins"/>
                <keyword attribute="Operator" context="#stay" String="operators"/>
                <keyword attribute="Directive" context="#stay" String="entity relations"/>

                <RegExpr String = "^[\s]*:-" attribute="Normal" context="directive" />

                <RegExpr String = "\b[A-Z_][A-Za-z0-9_]*" attribute = "Variable" context="#stay"/>

				<!-- Comments -->
                <DetectChar attribute="Comment" context="single line comment" char="%"/>
                <Detect2Chars attribute="Comment" context="multiline comment" char="/" char1="*"/>
				<!-- Numbers -->
                <Float attribute="Number" context="#stay" />
                <Int attribute="Number" context="#stay" />
                <RegExpr String = "0'[A-Za-z0-9]" attribute = "Number" context="#stay"/>
                <RegExpr String = "0b[0-1]+" attribute = "Number" context="#stay"/>
                <RegExpr String = "0o[0-7]+" attribute = "Number" context="#stay"/>
                <RegExpr String = "0x[0-9a-fA-F]+" attribute = "Number" context="#stay"/>
				<!-- Strings and quoted atoms -->
                <DetectChar attribute="String" context="string" char="&quot;" />
                <DetectChar attribute="String" context="atom" char="'" />
                <!-- Message sending operators -->
                <StringDetect String = "::" attribute="Operator" context="#stay" />
                <StringDetect String = "^^" attribute="Operator" context="#stay" />
				<!-- External call -->
                <DetectChar attribute="Operator" context="#stay" char="{" beginRegion="external" />
                <DetectChar attribute="Operator" context="#stay" char="}" endRegion="external" />
				<!-- Bitwise functors -->
                <StringDetect String = "&gt;&gt;" attribute="Operator" context="#stay" />
                <StringDetect String = "&lt;&lt;" attribute="Operator" context="#stay" />
                <StringDetect String = "/\" attribute="Operator" context="#stay" />
                <StringDetect String = "\/" attribute="Operator" context="#stay" />
                <StringDetect String = "\\" attribute="Operator" context="#stay" />
				<!-- Arithemtic evaluation -->
                <StringDetect String = "is" attribute="Operator" context="#stay" />
				<!-- Arithemtic comparison -->
                <StringDetect String = "=:=" attribute="Operator" context="#stay" />
                <StringDetect String = "=\=" attribute="Operator" context="#stay" />
                <StringDetect String = "&lt;" attribute="Operator" context="#stay" />
                <StringDetect String = "=&lt;" attribute="Operator" context="#stay" />
                <StringDetect String = "&gt;" attribute="Operator" context="#stay" />
                <StringDetect String = "&gt;=" attribute="Operator" context="#stay" />
				<!-- Term creation and decomposition -->
                <StringDetect String = "=.." attribute="Operator" context="#stay" />
				<!-- Term unification -->
                <StringDetect String = "=" attribute="Operator" context="#stay" />
                <StringDetect String = "\=" attribute="Operator" context="#stay" />
				<!-- Term comparison -->
                <StringDetect String = "==" attribute="Operator" context="#stay" />
				<StringDetect String = "\==" attribute="Operator" context="#stay" />
                <StringDetect String = "@=&lt;" attribute="Operator" context="#stay" />
                <StringDetect String = "@&lt;" attribute="Operator" context="#stay" />
                <StringDetect String = "@&gt;=" attribute="Operator" context="#stay" />
                <StringDetect String = "@&gt;" attribute="Operator" context="#stay" />
				<!-- Evaluable functors -->
                <StringDetect String = "+" attribute="Operator" context="#stay" />
                <StringDetect String = "-" attribute="Operator" context="#stay" />
                <StringDetect String = "*" attribute="Operator" context="#stay" />
                <StringDetect String = "//" attribute="Operator" context="#stay" />
                <StringDetect String = "/" attribute="Operator" context="#stay" />
                <StringDetect String = "rem" attribute="Operator" context="#stay" />
                <StringDetect String = "mod" attribute="Operator" context="#stay" />
				<!-- Other arithemtic functors -->
                <StringDetect String = "**" attribute="Operator" context="#stay" />
				<!-- Control constructs -->
                <StringDetect String = "!" attribute="Operator" context="#stay" />
                <StringDetect String = "-&gt;" attribute="Operator" context="#stay" />
                <StringDetect String = ";" attribute="Operator" context="#stay" />
				<!-- Mode operators -->
                <StringDetect String = "?" attribute="Operator" context="#stay" />
                <StringDetect String = "@" attribute="Operator" context="#stay" />
				<!-- Clause operator -->
                <StringDetect String = ":-" attribute="Normal" context="#stay" />

            </context>

            <context name="directive" attribute="Normal" lineEndContext="#stay">
                <keyword attribute="Directive" context="normal" String="directives"/>
            </context>

            <context name="single line comment" attribute="Comment" lineEndContext="#pop" />

            <context name="multiline comment" attribute="Comment" lineEndContext="#stay">
                <Detect2Chars attribute="Comment" context="#pop" char="*" char1="/" />
            </context>

            <context name="string" attribute="String" lineEndContext="#stay" >
                <DetectChar attribute="String" context="#pop" char="&quot;" />
            </context>

            <context name="atom" attribute="String" lineEndContext="#stay">
                <DetectChar attribute="String" context="#pop" char="'" />
            </context>

        </contexts>

		<itemDatas>
			<itemData name="Normal" defStyleNum="dsNormal" />
			<itemData name="Directive" defStyleNum="dsKeyword" />
			<itemData name="Built-in" defStyleNum="dsKeyword" />
			<itemData name="Operator" defStyleNum="dsDataType" />
			<itemData name="Comment" defStyleNum="dsComment" />
			<itemData name="Number" defStyleNum="dsDecVal" />
			<itemData name="String"  defStyleNum="dsString"/>
            <itemData name="Variable" defStyleNum="dsOthers"/>
		</itemDatas>

	</highlighting>

	<general>
		<keywords casesensitive="true" />
		<comments>
			<comment name="singleLine" start="%" />
			<comment name="multiLine" start="/*" end="*/" />
		</comments>
	</general>

</language>

