
================================================================
Logtalk - Open source object-oriented logic programming language
Release 2.43.2

Copyright (c) 1998-2011 Paulo Moura.        All Rights Reserved.
Logtalk is free software.  You can redistribute it and/or modify
it under the terms of the "Artistic License 2.0" as published by 
The Perl Foundation. Consult the "LICENSE.txt" file for details.
================================================================


The "lgtunit.lgt" file contains a simple framework for defining 
and running unit tests in Logtalk. To compile and load it type:

	| ?- logtalk_load(library(lgtunit)).

The unit tests framework is inspired on the works of Joachim Schimpf 
(ECLiPSe library "test_util") and Jan Wielemaker (SWI-Prolog "plunit" 
package).

In order to write your own unit tests, define objects extending the 
"lgtunit" object. These objects must be compiled using the compiler
option hook(lgtunit). For example:

	| ?- logtalk_load(my_tests, [hook(lgtunit)]).

Unit tests can be written using any of the following dialects:

1.	test(Test) :- Goal.

This is the most simple dialect, allowing the specification of tests
that are expected to succeed. However, tests that are expected to throw
an error cannot be specified.

2.	succeeds(Test) :- Goal.
	fails(Test) :- Goal.
	throws(Test, Error) :- Goal.

This is a straightforward dialect. For succeeds/1 tests, Goal is expected
to succeed. For fails/1 tests, Goal is expected to fail. For throws/2 tests,
Goal is expected to throw Error.

3.	test(Test, Outcome) :- Goal.

In this case, Outcome can be the atom "true", the atom "fail", or the
exception term that the test is expected to throw.

In all cases, Test is an atom, uniquely identifying a test.

For examples of how to write unit tests check the "testing" example in the
"examples" folder in the Logtalk distribution.

Note: when using the <</2 control construct to access and test an object
internal predicates, make sure that the "context_switching_calls" compiler
flag is set to "allow" for those objects.

In order to debug failed unit tests, you can compile the unit test objects
without using the hook/1 option and use the <</2 control construct to call
the individual tests. For example, if you have a test(test_n) unit test that
is failing, you can type:

	| ?- logtalk_load(my_tests).
	...

	| ?- my_tests << test(test_n).
	...

You may also compile the unit test objects in debug mode and use Logtalk's
built-in debugger. For example:

	| ?- logtalk_load(my_tests, [debug(on)]).
	...

	| ?- debugger::trace.
	...

	| ?- my_tests << test(test_n).
	...
