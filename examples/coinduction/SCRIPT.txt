================================================================
Logtalk - Open source object-oriented logic programming language
Release 2.40.2

Copyright (c) 1998-2010 Paulo Moura.        All Rights Reserved.
Logtalk is free software.  You can redistribute it and/or modify
it under the terms of the "Artistic License 2.0" as published by 
The Perl Foundation. Consult the "LICENSE.txt" file for details.
================================================================


% start by loading the example:

| ?- logtalk_load(coinduction(loader)).
...


% an elementary coinduction predicate:

| ?- simple::p.
true ;
false.

% similar:

| ?- simple::p(hoho).
true ;
false.


% the following goal is true for any cyclic list containing only ones:

| ?- L = [1| L], binary::p(L).
L = [1|**] .

% ... or zeros:

| ?- L = [0| L], binary::p(L).
L = [0|**] .

% or a repetition of a pattern of ones and zeros:

| ?- L = [1,0,1| L], binary::p(L).
L = [1, 0, 1|**] ;
false.

% but not all solutions can be returned:

| ?- binary::p(X).
X = [0|**] ;
X = [1|**] ;
false.


% infinite streams example:

| ?- streams::nat_stream([0, s(0), s(s(0))| T]).
T = [s(s(0))|**] ;
T = [s(0), s(s(0))|**] ;
T = [0, s(0), s(s(0))|**] .

|?- X = [0, 1, 1, 0| X], streams::bit_stream(X).
X = [0, 1, 1, 0|**] .


% list membership example:

| ?- X = [0, s(0), s(s(0))], lists::comember(s(0), X).
false.

| ?- X = [0, s(0), s(s(0))| X], lists::comember(s(0), X).
T = [s(s(0))|**] ;
T = [s(0), s(s(0))|**] ;
T = [0, s(0), s(s(0))|**] .


% list append example:

| ?- Y = [4,5,6| Y], lists::append([1,2,3], Y, Z).
Y = [4, 5, 6|**],
Z = [1, 2, 3, 4, 5, 6|**].

| ?- X = [1,2,3| X], Y = [3,4| Y], lists::append(X, Y, Z).
X = [1, 2, 3|**],
Y = [3, 4|**],
Z = [1, 2, 3|**] .

| ?- Z = [1,2| Z], lists::append(X, Y, Z).
Z = [1, 2|**],
X = [],
Y = [1, 2|**] ;
Z = [1, 2|**],
X = [1],
Y = [2, 1|**] ;
Z = [1, 2|**],
X = [1, 2|**] .


% omega-automaton example:

| ?- automata::automata(X, s0).
X = [a, b, c, d|**] ;
X = [a, b, e|**] .


% module 4 counter example:
% (not working; needs a tabling implementation supporting cyclic terms!)

| ?- counter::verify.
true .


% nested automata example:

| ?- 


% timed automata example:

| ?- train::driver(s0, s0, s0, T, Ta, Tb, Tc, X, R).
X = [approach, lower, down, in, out, exit, raise, approach, up|...],
R = [ (approach, T), (lower, _G7491), (down, _G7497), (in, _G7503), (out, _G7509), (exit, _G7515), (raise, _G7521), (approach, _G7527), (..., ...)|...] ;
X = [approach, lower, down, in, out, exit, raise, up|_G26549],
R = [ (approach, T), (lower, _G26567), (down, _G26573), (in, _G26579), (out, _G26585), (exit, _G26591), (raise, _G26597), (up, _G26603)|_G26600],
{_G26613>0.0, _G26622=... - ... + _G26638+_G26635+_G26632+_G26629+_G26613, _G26652=... + ... - _G26641+_G26638+_G26635+_G26632, _G26629>1.0, _G26629<2.0, _G26603=... + ... + _G26629, _G26721=... + ..., ... > ..., ..., ...} ;
false.
