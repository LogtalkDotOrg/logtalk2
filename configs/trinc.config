%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%  Logtalk - Object oriented extension to Prolog
%  Release 2.14.3
%
%  configuration file for Trinc Prolog R3
%
%  last updated: August 19, 2002
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%  ISO Prolog Standard predicates that we must define because they are
%  not built-in
%
%  add a clause for lgt_iso_predicate/1 declaring each ISO predicate that
%  we must define; there must be at least one clause for this predicate
%  whose call should fail if we don't define any ISO predicates
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% '$lgt_iso_predicate'(?callable).

'$lgt_iso_predicate'(_) :-
	fail.



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%  predicate properties
%
%  this predicate must return at least static, dynamic, and built_in 
%  properties for an existing predicate
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% '$lgt_predicate_property'(+callable, ?predicate_property)

'$lgt_predicate_property'(Pred, built_in) :-
	iso_bip(Pred).

'$lgt_predicate_property'(Pred, dynamic) :-
	functor(Pred, Functor, Arity),
	functor(Clause, Functor, Arity), 
	catch((asserta(Clause), retract(Clause), !), _, fail).



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%  metapredicates
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% forall(+callable, +callble)

forall(Generate, Test) :-
	\+ call((Generate, \+ call(Test))).


% retractall(+callable)

retractall(Head) :-
	retract((Head :- _)),
	fail.

retractall(_).


% lgt_call/2-8
%
% if your compiler provides call/1-8 as built-in 
% predicates rewrite these definitions using call(...).

'$lgt_call'(F, A) :-
	Call =.. [F, A],
	call(Call).


'$lgt_call'(F, A1, A2) :-
	Call =.. [F, A1, A2],
	call(Call).


'$lgt_call'(F, A1, A2, A3) :-
	Call =.. [F, A1, A2, A3],
	call(Call).


'$lgt_call'(F, A1, A2, A3, A4) :-
	Call =.. [F, A1, A2, A3, A4],
	call(Call).


'$lgt_call'(F, A1, A2, A3, A4, A5) :-
	Call =.. [F, A1, A2, A3, A4, A5],
	call(Call).


'$lgt_call'(F, A1, A2, A3, A4, A5, A6) :-
	Call =.. [F, A1, A2, A3, A4, A5, A6],
	call(Call).


'$lgt_call'(F, A1, A2, A3, A4, A5, A6, A7) :-
	Call =.. [F, A1, A2, A3, A4, A5, A6, A7],
	call(Call).


% lgt_once/2-8
%
% if your compiler provides call/1-8 as built-in 
% predicates rewrite these definitions using call(...), !.

'$lgt_once'(F, A) :-
	Call =.. [F, A],
	once(Call).


'$lgt_once'(F, A1, A2) :-
	Call =.. [F, A1, A2],
	once(Call).


'$lgt_once'(F, A1, A2, A3) :-
	Call =.. [F, A1, A2, A3],
	once(Call).


'$lgt_once'(F, A1, A2, A3, A4) :-
	Call =.. [F, A1, A2, A3, A4],
	once(Call).


'$lgt_once'(F, A1, A2, A3, A4, A5) :-
	Call =.. [F, A1, A2, A3, A4, A5],
	once(Call).


'$lgt_once'(F, A1, A2, A3, A4, A5, A6) :-
	Call =.. [F, A1, A2, A3, A4, A5, A6],
	once(Call).


'$lgt_once'(F, A1, A2, A3, A4, A5, A6, A7) :-
	Call =.. [F, A1, A2, A3, A4, A5, A6, A7],
	once(Call).



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%  file extension predicates
%
%  these extensions are used by Logtalk load/compile predicates
%
%  you may want to change the extension for Prolog files to match 
%  the one expected by your Prolog compiler
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% '$lgt_file_extension'(?atom, ?atom)

'$lgt_file_extension'(logtalk, '.lgt').
'$lgt_file_extension'(prolog, '.pl').
'$lgt_file_extension'(xml, '.xml').



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%  default flag values
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% '$lgt_default_flag'(?atom, ?atom)
%
% default values for all flags

'$lgt_default_flag'(iso_initialization_dir, true).

'$lgt_default_flag'(xml, on).
'$lgt_default_flag'(xsl, 'lgtxml.xsl').
'$lgt_default_flag'(doctype, local).

'$lgt_default_flag'(unknown, warning).
'$lgt_default_flag'(misspelt, warning).
'$lgt_default_flag'(singletons, warning).
'$lgt_default_flag'(lgtredef, warning).
'$lgt_default_flag'(plredef, silent).
'$lgt_default_flag'(portability, silent).

'$lgt_default_flag'(report, on).

'$lgt_default_flag'(smart_compilation, off).

'$lgt_default_flag'(startup_message, on).

'$lgt_default_flag'(named_anonymous_vars, off).

'$lgt_default_flag'(code_prefix, '').



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%  list predicates
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


'$lgt_append'([], List, List).
'$lgt_append'([Head| Tail], List, [Head| Tail2]) :-
	'$lgt_append'(Tail, List, Tail2).


'$lgt_member'(Head, [Head| _]).
'$lgt_member'(Head, [_| Tail]) :-
	'$lgt_member'(Head, Tail).


'$lgt_member_var'(V, [H| _]) :-
	V == H.
'$lgt_member_var'(V, [_| T]) :-
	'$lgt_member_var'(V, T).


'$lgt_proper_list'([]).
'$lgt_proper_list'([_| List]) :-
	'$lgt_proper_list'(List).



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%  file predicates
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% '$lgt_file_exists'(+atom)
%
% see if a file exist in the current directory

'$lgt_file_exists'(File) :-
	catch(open(File, read, Stream), _, fail),
	close(Stream).


% '$lgt_load_prolog_code'(+atom)
%
% compile and load a Prolog file

'$lgt_load_prolog_code'(File) :-
	consult(File).


% '$lgt_compare_file_mtimes'(?atom, +atom, +atom)
%
% compare file modification times

'$lgt_compare_file_mtimes'(_, _, _) :-
	fail.



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%  sorting predicate
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% '$lgt_keysort'(+list, -list)

'$lgt_keysort'(List, Sorted) :-
	throw(error(not_yet_implemented, keysort/2)).


% '$lgt_sort'(+list, -list)

'$lgt_sort'(List, Sorted) :-
	throw(error(not_yet_implemented, sort/2)).



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%  time and date predicates
%
%  if your Prolog compiler does not provide access to the operating system 
%  time and date just write dummy definitions
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% '$lgt_current_date'(?Year, ?Month, ?Day)

'$lgt_current_date'(1999, 12, 3).


% '$lgt_current_time'(?Hours, ?Mins, ?Secs)

'$lgt_current_time'(0, 0, 0).



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%  timing predicate
%
%  if your Prolog compiler does not provide access to a timing predicate 
%  just write dummy definition
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% '$lgt_cpu_time'(-Seconds)

'$lgt_cpu_time'(Seconds) :-
	throw(error(not_yet_implemented, cpu_time/1)).



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%  comparison predicate
%
%  the usual compare/3 definition
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% compare(?atom, @term, @term)

compare(<, X, Y) :-
	X @< Y, !.

compare(=, X, Y) :-
	X == Y, !.
	
compare(>, X, Y) :-
	X @> Y.



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%  end!
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



iso_bip(_ = _).
iso_bip(_ \= _).
iso_bip(unify_with_occurs_check(_, _)).

iso_bip(var(_)).
iso_bip(atom(_)).
iso_bip(integer(_)).
iso_bip(float(_)).
iso_bip(atomic(_)).
iso_bip(compound(_)).
iso_bip(nonvar(_)).
iso_bip(number(_)).

iso_bip(_ @=< _).
iso_bip(_ @< _).
iso_bip(_ @>= _).
iso_bip(_ @> _).
iso_bip(_ == _).
iso_bip(_ \== _).

iso_bip(functor(_, _, _)).
iso_bip(arg(_, _, _)).
iso_bip(copy_term(_, _)).
iso_bip(_ =.. _).

iso_bip(_ is _).

iso_bip(_ =:= _).
iso_bip(_ =\= _).
iso_bip(_ < _).
iso_bip(_ =< _).
iso_bip(_ > _).
iso_bip(_ >= _).

iso_bip(clause(_, _)).
iso_bip(current_predicate(_)).

iso_bip(abolish(_)).
iso_bip(asserta(_)).
iso_bip(assertz(_)).
iso_bip(retract(_)).

iso_bip(bagof(_, _, _)).
iso_bip(findall(_, _, _)).
iso_bip(setof(_, _, _)).

iso_bip(current_input(_)).
iso_bip(current_output(_)).
iso_bip(set_input(_)).
iso_bip(set_output(_)).
iso_bip(open(_, _, _)).
iso_bip(open(_, _, _, _)).
iso_bip(close(_)).
iso_bip(close(_, _)).
iso_bip(flush_output).
iso_bip(flush_output(_)).
iso_bip(stream_property(_, _)).
iso_bip(set_stream_position(_, _)).
iso_bip(at_end_of_stream).
iso_bip(at_end_of_stream(_)).

iso_bip(get_char(_)).
iso_bip(get_char(_, _)).
iso_bip(get_code(_)).
iso_bip(get_code(_, _)).
iso_bip(peek_char(_)).
iso_bip(peek_char(_, _)).
iso_bip(peek_code(_)).
iso_bip(peek_code(_, _)).
iso_bip(put_char(_)).
iso_bip(put_char(_, _)).
iso_bip(put_code(_)).
iso_bip(put_code(_, _)).
iso_bip(nl).
iso_bip(nl(_)).

iso_bip(get_byte(_)).
iso_bip(get_byte(_, _)).
iso_bip(peek_byte(_)).
iso_bip(peek_byte(_, _)).
iso_bip(put_byte(_)).
iso_bip(put_byte(_, _)).

iso_bip(read_term(_, _)).
iso_bip(read_term(_, _, _)).
iso_bip(read(_)).
iso_bip(read(_, _)).
iso_bip(write_term(_, _)).
iso_bip(write_term(_, _, _)).
iso_bip(write(_)).
iso_bip(write(_, _)).
iso_bip(writeq(_)).
iso_bip(writeq(_, _)).
iso_bip(write_canonical(_)).
iso_bip(write_canonical(_, _)).
iso_bip(op(_, _, _)).
iso_bip(current_op(_, _, _)).
iso_bip(char_conversion(_, _)).
iso_bip(current_char_conversion(_, _)).

iso_bip(\+ _).
iso_bip(once(_)).
iso_bip(repeat).

iso_bip(atom_length(_, _)).
iso_bip(atom_concat(_, _, _)).
iso_bip(sub_atom(_, _, _, _, _)).
iso_bip(atom_chars(_, _)).
iso_bip(atom_codes(_, _)).
iso_bip(char_code(_, _)).
iso_bip(number_chars(_, _)).
iso_bip(number_codes(_, _)).

iso_bip(current_prolog_flag(_, _)).
iso_bip(set_prolog_flag(_, _)).
iso_bip(halt).
iso_bip(halt(_)).

iso_bip(true).
iso_bip(fail).
iso_bip(call(_)).
iso_bip(!).
iso_bip(catch(_,_,_)).
iso_bip(throw(_)).
