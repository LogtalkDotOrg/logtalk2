=================================================================
Logtalk - Object oriented extension to Prolog
Release 2.20.0

Copyright (c) 1998-2004 Paulo Moura.  All Rights Reserved.
=================================================================


This file contains some notes about the config files provided. If you
improve or correct some of these files, or write new ones for other
Prolog compilers, please send me a copy. It is impossible for me to 
individually test Logtalk under each Prolog listed here (or, for that 
mater, to own a copy of each one of these compilers). For some of 
these Prologs I only have the (on-line available) manuals.

As a general rule, always try to use the most recent version of your
Prolog compiler of choice. Most Prolog compilers are moving towards
better ISO Standard compatibility and, as a consequence, improved
Logtalk compatibility.


template config file

	template.config

	If a config file for your favorite Prolog is not available, use this 
	file to write one. For each predicate in the file, see if it is built-in 
	in your Prolog, available in a library, or if you can write a better 
	definition.


ALS Prolog 3.1

	als.config

	Only a few tests have been done with this compiler. One known problem: an
	ALS bug in operator handling that make calls like "\+ ::Pred" be 
	interpreted like "::(\+ Pred)" instead of "\+ (::Pred)". A workaround is 
	to replace all occurrences of "\+ ::Pred" by "\+ (::Pred)" and all 
	occurrences of "\+ Obj::Pred" by "\+ (Obj::Pred)". Please report any other 
	problems that you might find. Don't forget to use the cd/1 predicate to 
	set the working directory before loading the library or an example. Consult 
	the file builtins/comp_d10.pro in the ALS Prolog installation directory in 
	order to get the definition of predicate numbervars/3 needed by the Logtalk 
	built-in debugger. Supports smart compilation of source files.


Amzi! Prolog 6.2.2 and later versions

	amzi.config

	For Amzi! Prolog 6.22 and later releases. The compiler definition of the 
	compare/3 built-in predicate returns the atom == instead of = for 
	identical terms (contrary to every other Prolog compiler!). You need to 
	search the library files for all calls of the compare/3 predicate and 
	make the necessary changes. Don't forget to use the chdir/1 predicate 
	to set the working directory before loading the library or an example.


B-Prolog 4.0~5.0, 6.4 and later versions

	b5.config

	For B-Prolog 4.0 or 5.0.
	The (Logtalk) predicates '$lgt_current_date'/3 and '$lgt_current_time'/3 
	have dummy definitions. Don't forget to use the chdir/1 predicate to 
	set the working directory before loading the library or an example.

	b6.config

	For B-Prolog 6.4 and later versions.
	This version contains a bug in the atom_concat/3 predicate that prevents 
	some examples such as the "symdiff" from running. Don't forget to use the 
	chdir/1 predicate to set the working directory before loading the library 
	or an example.


Bin-Prolog 8.x~10.x

	bin.config

	Start BinProlog using "bp -l4". You will need to create project files to 
	workaround the restriction of only one top-level file per interactive 
	session. For instance, the project file for the metapredicates example
	will look like (in the Unix version):
	
		:- ['$LOGTALKHOME/configs/bin.config'].
		:- ['$LOGTALKHOME/compiler/logtalk.pl'].
		
		:- ['$LOGTALKHOME/examples/metapredicates/meta.pl'].
		:- ['$LOGTALKHOME/examples/metapredicates/sort1.pl'].
		...
	
	You will probably want to have a project file including only the config
	and the pre-processor/runtime files (logtalk.pl) in order to compile the
	examples using logtalk_compile/1-2 (do NOT use logtalk_load/1-2 or the 
	provided loader files). Don't forget to call the cd/1 predicate to set 
	the working directory before compiling the library or an example. 
	Supports smart compilation of source files.

	Updated and tested with help of Arun Majumdar.


CIAO Prolog 1.8p2 and later versions

	ciao.config
	ciao_aux.config

	The ciao.config is just a loader file with two include/1 directives 
	that load the ciao_aux.config and the Logtalk compiler/runtime. You 
	must edit the contents of the file ciao.config to match your operating 
	system (the include directives arguments are file paths that differ 
	between operating systems). The definition of the '$lgt_predicate_property'/2 
	in file ciao_aux.config is a bit of a hack, but should enable you to run 
	the Logtalk companion examples and to try out your own Logtalk programs. 
	Don't forget to call the cd/1 predicate to set the working directory before 
	compiling the library or an example (you will need first to load the library 
	system that exports the cd/1 predicate by calling the goal 
	use_module(library(system)). Supports smart compilation of source files.


ECLiPSe 5.5~5.7

	eclipse.config
	eclipseiso.config

	There are two configs files for this compiler. The first one, named 
	"eclipse.config", should be used when, for some reason, we don't want 
	to load the "iso" library. The second file, "eclipseiso.config" contains 
	a call to load the "iso" library. Both config files may be used with
	ECLiPSe versions from 5.5 to 5.7
	
	You should use the eclipseiso.config whenever possible. The alternative 
	config file may not contain all the needed definitions for ISO Prolog 
	predicates that are needed for compiling Logtalk itself, the Logtalk 
	library or the Logtalk examples.

	For improved performance, add the following calls to the top of all the 
	files in the "compiler" sub-directory:
	
		:- pragma(system).
		:- pragma(nodebug).

	These calls disables debugging support for the Logtalk compiler/runtime 
	Prolog code and mark the Logtalk predicates as built-ins. Make sure that 
	the library toplevel is loaded if you want to use the Logtalk built-in 
	debugger.

	Adopted from a config file written and tested with help of Taner Bilgic 
	for Logtalk 1.x. Don't forget to use the cd/1 predicate to set the working 
	directory before loading the library or an example. Supports smart 
	compilation of source files.


GNU Prolog 1.1.2 (and later versions, except 1.2.13)

	gnu.config

	GNU Prolog supports the ISO Prolog standard. No problems expected. You 
	can generate a new Prolog top level that includes the Logtalk config file
	and pre-processor plus the runtime by doing something like:

	% cd $LOGTALKHOME
	% mv configs/gnu.config configs/gnu.pl

	Edit the compiler/logtalk.pl file and add the line ":- built_in." to the 
	top. Then:

	% gplc -o logtalk configs/gnu.pl compiler/logtalk.pl
	% mv logtalk /usr/local/bin/

	This way, every time you want to work with Logtalk you will just need to
	type:

	% logtalk

	Don't forget to use the change_directory/1 predicate to set the working 
	directory before loading the library or an example. Supports smart 
	compilation of source files.


IF/Prolog 5.1

	if.config

	IF/Prolog 5.1 supports the ISO Prolog standard. No problems expected.
	Don't forget to use the cd/1 predicate to set the working directory 
	before loading the library or an example. Supports smart compilation 
	of source files.


K-Prolog 5.01 Linux/Solaris, 5.02 Windows and later versions

	k.config

	Config file for the Linux/Solaris 5.01 version or Windows 5.0.2 version or 
	later versions (if you are still running version 5.00, please upgrade before 
	using Logtalk). K-Prolog 5.01 supports the ISO Prolog standard. No problems 
	expected. This config file have been written with the help of Nobukuni Kino. 
	Don't forget to use the cd/1 predicate to set the working directory before 
	loading the library or an example. Supports smart compilation of source files.


LPA MacProlog32 1.25

	lpamac.config

	This is my old Prolog development environment. Two known problems: (1) an
	LPA bug in operator handling that make calls like "\+ ::Pred" be 
	interpreted like "::(\+ Pred)" instead of "\+ (::Pred)". A workaround is 
	to replace all occurrences of "\+ ::Pred" by "\+ (::Pred)"; (2) If you call 
	the \+ operator in your code the writeq/1 built-in don't always output a 
	space after the operator resulting in calls like "\+(...)". Because \+ is 
	not defined as a predicate this will fail. Don't forget to use the dvol/1 
	predicate to set the working directory before loading an example.
	Due to the size of the Logtalk pre-processor file, you must load it by 
	using the consult/1 predicate instead of using the File:Open menu option.
	Be aware that this configuration file redefines some built-ins that
	you may use in your own programs. You must be careful to not consult the 
	config file twice. Supports smart compilation of source files.


LPA WinProlog32 4.0x

	lpawin.config

	Written with the help of the LPA support team. Of course, if you find any 
	bugs please direct your flames to me ;-). Be aware that this configuration 
	file redefines some built-ins that you may use in your programs. Don't 
	forget to use the chdir/1 predicate to set the working directory before 
	loading the library or an example. Be careful to not consult the config 
	file twice. Supports smart compilation of source files.


MasterProlog 4.1

	master.config

	Written with the help of the MasterProlog support team (but if you find 
	any Logtalk problem please report it to me). 
	If in the MasterProlog version that you are using the implementation of 
	the close/1 predicate does not follow the ISO standard, you will have to 
	apply the following patch to the Logtalk pre-processor: replace every 
	call of close(...) with fclose(...).


Open Prolog 1.1b5

	open.config

	Limited test done. Please report any problems that you may find.
	Don't forget to use the set_folder/1 predicate to set the working 
	directory before loading the library or an example.


PrologII+ 4.5 and later versions

	prologII.config

	Written and tested with the help of Claude Lai from PrologIA. You need
	to apply the following patches to the Logtalk pre-processor/runtime:
	Search and replace every instance of "quoted(true)" with "quoted(:true)";
	"open(File, write, Stream)" with "open(File, :write, Stream)",
	"catch(close(Stream), _, true)" with "catch(close(Stream), _, :true)",
	"open(File, read, Stream)" with "open(File, :read, Stream, [eof_action(eof_code)])".
	Remember that you need to use the set_import_dir/1 built-in predicate to
	set the working directory before loading the library or an example.


Qu-Prolog 6.5

	qu.config

	Qu-Prolog 6.5 does not support floats. In order to compile the Logtalk 
	library and the Logtalk examples you will need to replace all occurrences 
	of floats by either integers or (quoted) atoms. In Unix-like systems, you
	may perform the changes by running the following commands:

		% cd $LOGTALKHOME
		% find . -name "*.lgt" -exec perl -pi -e "s/version is (\d)\.(\d)/version is '\1\.\2'/" {} \;

	Not that the above patch will not enable some examples that use floats to 
	run.

	In order to compile and load both the config file and the Logtalk compiler,
	the following sequence of steps is advised. First make a copy of the config 
	file:

		% cd $LOGTALKHOME/configs; cp qu.config qu.ql

	Second, start Qu-Prolog using adequate switches. For example:

		% qp -s 2048 -d 1024 -h 2000

	Next, compile and load the config file using:

		| ?- fcompile('qu.ql', [assemble_only(true)]), load(qu).

	Finally, compile and load the Logtalk compiler:

		| ?- chdir('../compiler/'), fcompile('logtalk.pl', [assemble_only(true), string_table(256)]), load(logtalk).

	Don't forget to use the chdir/1 predicate to set the working directory 
	before loading the library or an example.

	Written and tested with the help of Peter Robinson.


Quintus Prolog 3.3~3.5

	quintus.config

	Written and tested with help of a friend of mine, Paulo Urbano, for a 
	previous version. Adopted (but not tested) for the current release by
	using information available on-line in the internet. Don't forget to use 
	the unix(cd(Dir)) predicate to set the working directory before loading 
	the library or an example. Supports smart compilation of source files.


SICStus Prolog 3.8~3.11.x

	sicstus.config
	
	For versions 3.8.x~3.11.x. The config file sets the flag language to 
	iso, but that is only recommended and should not be needed to run Logtalk.
	No problems expected although not fully tested. Don't forget to use the 
	SICStus working_directory/2 predicate to set the working directory before 
	loading the library or an example. Supports smart compilation of source 
	files.

	If you want SICStus Prolog to automatically load Logtalk at startup, then 
	add the following lines to your ~/.sicstusrc or ~/.sicstus.ini initialization
	file:
	
		:- compile('$LOGTALKHOME/configs/sicstus.config').
		:- compile('$LOGTALKHOME/compiler/logtalk.pl').

    Consult the SICStus Prolog documentation for further information on the 
    ~/.sicstusrc and ~/.sicstus.ini user initialization files.


SWI Prolog 3.3.x and all later versions

	swi.config

	For version 3.3.x and all later versions (5.2.3 or later recommended)

	No problems expected. Please report any problem found (with a solution 
	if possible). Don't forget to use the cd/1 predicate to set the working 
	directory before loading the library or an example. Supports smart 
	compilation of source files. To improve the integration between Logtalk 
	and SWI-Prolog edit the compiler/logtalk.pl file and add the line 
	":- system_module." to the top of the file. You may also load the file 
	configs/swihook.pl in order to be able to load Logtalk entities using 
	SWI-Prolog load_files/2 and consult/1 predicates.

	If you want SWI-Prolog to automatically load Logtalk at startup, then add 
	the following lines to your pl.ini (on Windows):

		:- ['drive:\\path to logtalk installation\\configs\\swi.config'].
		:- ['drive:\\path to logtalk installation\\compiler\\logtalk.pl'].

	 or to your .plrc (on MacOS X, Unix, and similar systems):
	
		:- ['$LOGTALKHOME/configs/swi.config'].
		:- ['$LOGTALKHOME/compiler/logtalk.pl'].

    See the SWI-Prolog documentation for further information on the .plrc and 
    pl.ini user initialization files.


XSB Prolog 2.6

	xsb.config

	You need to rename both the config file and the Logtalk pre-processor to 
	end with a '.P' extension otherwise the (re)consult built-in predicate 
	will not find them!

	You also need to apply the following patch to the Logtalk compiler. Open 
	the file compiler/logtalk.pl, find the clauses that read: 
	
		'$lgt_current_object_'(user, ...).
		'$lgt_current_object_'(debugger, ...).
	
		'$lgt_dbg_leasing_'(...).
		
	and replace it with the queries:
	
		:- assertz('$lgt_current_object_'(user, ...)).
		:- assertz('$lgt_current_object_'(debugger, ...)).

		:- assertz('$lgt_dbg_leasing_'(...)).
	
	You may get syntax errors while compiling the Logtalk pre-processor 
	or some of the examples due to a know bug in the XSB parsing of infix 
	operators: just add a space after the infix operator.

	The write_canonical/2 predicates may output code that in some instances 
	can not be read back with read_term/3. If you receive a syntax error 
	while loading a Logtalk compiled file we will have to fix the problem by 
	editing the file (the Prolog output, not the Logtalk source). Don't 
	forget to use the cd/1 predicate to set the working directory before 
	loading the library or an example.


YAP 4.3.x~4.5.x

	yap.config

	For all 4.3.x and later versions. Don't forget to use the cd/1 predicate 
	to set the working directory before loading the library or an example. 
	Supports smart compilation of source files.
