=================================================================
Logtalk - Object oriented extension to Prolog
Release 2.14.0

Copyright (c) 1998-2002 Paulo Moura.  All Rights Reserved.
=================================================================

>>>> CONFIG FILE CONTENTS DIFFERENT FROM PREVIOUS RELEASES.
>>>> SEE FILE template.config FOR DETAILS.

This file contains some notes about the config files provided. If you
improve or correct some of these files, or write new ones for other
Prolog compilers, please send me a copy. It is impossible for me to 
individually test Logtalk under each Prolog listed here (or, for that mater, 
to own a copy of each one of these compilers). For some of these Prologs I 
only have the (on-line available) manuals.

As a general rule, always try to use the most recent version of your
Prolog compiler of choice. Most Prolog compilers are moving towards
better ISO Standard compatibility and, as a consequence, improved
Logtalk compatibility.

>>>> CHECK THE CONFIGURATION FILE THAT YOU INTEND TO USE CAREFULLY
>>>> BEFORE TRYING TO RUN LOGTALK



template config file

	template.config

	If a config file for your favorite Prolog is not available, use this 
	file to write one. For each predicate in the file, see if it is builtin 
	in your Prolog, available in a library, or if you can write a better 
	definition.


ALS Prolog 3.1

	als.config

	Only a few tests have been done with this compiler. One known problem: an
	ALS bug in operator handling that make calls like "\+ ::Pred" be 
	interpreted like "::(\+ Pred)" instead of "\+ (::Pred)". A workaround is 
	to replace all occurences of "\+ ::Pred" by "\+ (::Pred)" and all 
	occurences of "\+ Obj::Pred" by "\+ (Obj::Pred)". Please report any other 
	problems that you might find. Don't forget to use the cd/1 predicate to 
	set the working directory before loading an example. Supports smart 
	compilation of source files.


Amzi! Prolog 4.103, 5.0, 6.22

	amzi.config

	For Amzi! Prolog 4.103 and 5.0. The compiler definition of the compare/3 
	built-in predicate returns the atom == instead of = for identical terms 
	(contrary to every other Prolog compiler!). You need to search the library
	files for all calls of the compare/3 predicate and make the necessary 
	changes.

	Older versions of the Amzi! compiler contain a bug in the implementation 
	of the if-then-else control structure that affects Logtalk behaviour (and
	any other program using it!). Don't forget to use the chdir/1 predicate 
	to set the working directory before loading an example.

	amzi6.config

	For Amzi! Prolog 6.22 release. The compiler definition of the 
	compare/3 built-in predicate returns the atom == instead of = for 
	identical terms (contrary to every other Prolog compiler!). You need to 
	search the library files for all calls of the compare/3 predicate and 
	make the necessary changes. Don't forget to use the chdir/1 predicate 
	to set the working directory before loading an example.


Aquarius Prolog 1.0
	
	aquarius.config

	THIS CONFIG FILE IS INCOMPLETE. Any help in finishing it will be 
	appreciated. Don't forget to use the unix(cd(+Directory)) predicate to 
	set the working directory before loading an example.


Arity/Prolog32 V 1.1

	arity.config

	THIS CONFIG FILE IS INCOMPLETE. Any help in finishing it will be 
	appreciated. Don't forget to use the chdir/1 predicate to set the 
	working directory before loading an example.


B-Prolog 4.0~5.0, 6.x

	b5.config

	For B-Prolog 4.0 or 5.0.
	The (Logtalk) predicates lgt_current_date/3 and lgt_current_time/3 
	have dummy definitions. Don't forget to use the chdir/1 predicate to 
	set the working directory before loading an example.

	b6.config

	For B-Prolog 6.x.
	Don't forget to use the chdir/1 predicate to set the working 
	directory before loading an example.


Bin-Prolog 8.x

	bin.config

	Start BinProlog using "bp -l4". You will need to create project files to 
	workaround the restriction of only one top-level file per interactive 
	session. For instance, the project file for the metapredicates example
	will look like (in the Unix version):
	
		:- ['configs/bin.config'].
		:- ['compiler/logtalk.pl'].
		
		:- ['examples/metapredicates/meta.pl'].
		:- ['examples/metapredicates/sort1.pl'].
		...
	
	You will probably want to have a project file including only the config
	and the pre-processor/runtime files (logtalk.pl) in order to compile the
	examples using logtalk_compile/1 (do NOT use logtalk_load/1 or the 
	provided loader files). Don't forget to call the cd/1 predicate to set 
	the working directory before compiling an example. Supports smart 
	compilation of source files.

	Updated and tested with help of Arun Majumdar.


CIAO Prolog 1.6p1, 1.8p0

	ciao16.config
	ciao_aux16.config

	ciao18.config
	ciao_aux18.config

	The ciao1x.config is just a loader file with two include/1 directives 
	that load the ciao_aux1x.config and the Logtalk compiler/runtime. You 
	must edit the contents of the file ciao.config to match your operating 
	system (the include directives arguments are file paths that differ 
	between operating systems). The definition of the 
	lgt_predicate_property/2 in file ciao_aux.config is a bit of a hack, 
	but should enable you to run the Logtalk companion examples and to try 
	out your own Logtalk programs. Don't forget to call the cd/1 predicate 
	to set the working directory before compiling an example (you will need 
	first to load the library system that exports the cd/1 predicate by 
	calling the goal use_module(library(system))). Supports smart compilation 
	of source files.


Eclipse 4.2.2~5.1, 5.2~5.3, 5.4

	eclipse.config
	eclipse52.config
	eclipse54.config
	eclipseiso.config

	There are four configs files for this compiler. The first one, named 
	"eclipse.config", should be used when, for some reason, we don't want 
	to load the "iso" library, with versions from 4.2.2 to 5.1. The second 
	file, "eclipse52.config" is similar to the first one but is written for 
	version 5.2 and 5.3. The third file, "eclipse54.config", is for version 
	5.4. The fourth file, "eclipseiso.config" contains a call to load the 
	"iso" library and should be compatible with all versions from 4.2.2 to 
	5.4.

	Adopted from a config file written and tested with help of Taner Bilgic 
	for Logtalk 1.x. Don't forget to use the cd/1 predicate to set the working 
	directory before loading an example. Supports smart compilation of source 
	files.


GNU Prolog 1.1.2 (and later versions, except 1.2.13; 1.2.14 is ok)

	gnu.config

	GNU Prolog supports the ISO Prolog standard. No problems expected. You 
	can generate a new Prolog top level that includes the Logtalk config file
	and pre-processor plus the runtime by doing something like:

	% cd lgt2140
	% cp configs/gnu.config configs/gnu.pl

	Edit the configs/gnu.pl file and define the flag "code_'prefix" to be '$'.

	% gplc -o logtalk configs/gnu.pl compiler/logtalk.pl
	% mv logtalk /usr/local/bin/

	This way, every time you want to work with Logtalk you will just need to
	type:

	% logtalk

	Don't forget to use the change_directory/1 predicate to set the working 
	directory before loading an example. Supports smart compilation of source 
	files.


IC Prolog II 0.96

	ic.config

	THIS CONFIG FILE IS INCOMPLETE. Any help in finishing it will be 
	appreciated (how do we define ISO compliant catch/3 and throw/1 
	predicates ?). Don't forget to use the cd/1 predicate to set the 
	working directory before loading an example.


IF/Prolog 5.1

	if.config

	IF/Prolog 5.1 supports the ISO Prolog standard. No problems expected.
	Don't forget to use the cd/1 predicate to set the working directory 
	before loading an example. Supports smart compilation of source files.


K-Prolog 4.5, 5.01 Linux/Solaris, 5.02 Windows

	k45.config

	For Logtalk to run with K-Prolog 4.5 you need to apply the following patch
	to the Logtalk pre-processor: find and replace every instance of "throw(" 
	with "iso_throw(". This config file have been written with the help of 
	Nobukuni Kino. Don't forget to use the cd/1 predicate to set the working 
	directory before loading an example. Supports smart compilation of source 
	files.

	k50.config

	Config file for the Linux/Solaris 5.01 version or Windows 5.0.2 version
	(if you are still running version 5.00 please upgrade before using Logtalk). 
	K-Prolog 5.01 supports the ISO Prolog standard. No problems expected. 
	This config file have been written with the help of Nobukuni Kino. Don't 
	forget to use the cd/1 predicate to set the working directory before 
	loading an example. Supports smart compilation of source files.


LPA MacProlog32 1.25

	lpamac.config

	This is my old Prolog development environment. Two known problems: (1) an
	LPA bug in operator handling that make calls like "\+ ::Pred" be 
	interpreted like "::(\+ Pred)" instead of "\+ (::Pred)". A workaround is 
	to replace all occurences of "\+ ::Pred" by "\+ (::Pred)"; (2) If you call 
	the \+ operator in your code the writeq/1 built-in don't always output a 
	space after the operator resulting in calls like "\+(...)". Because \+ is 
	not defined as a predicate this will fail. Don't forget to use the dvol/1 
	predicate to set the working directory before loading an example.
	Due to the size of the Logtalk pre-processor file, you must load it by 
	using the consult/1 predicate instead of using the File:Open menu option.
	Be aware that this configuration file redefines some built-ins that
	you may use in your own programs. You must be careful to not consult the 
	config file twice. Supports smart compilation of source files.


LPA WinProlog32 3.61 & 4.xx

	lpawin36.config
	lpawin40.config

	Written with the help of the LPA support team. Of course, 
	if you find any bug please direct your flames to me ;-).
	Be aware that this configuration file redefines some built-ins that
	you may use in your programs. Don't forget to use the chdir/1 
	predicate to set the working directory before loading an example. Be 
	careful to not consult the config file twice. Supports smart compilation 
	of source files.


MasterProlog 4.1

	master.config

	Written with the help of the MasterProlog support team (but if you find 
	any Logtalk problem please report it to me). 
	If in the MasterProlog version that you are using the implementation of 
	the close/1 predicate does not follow the ISO standard, you will have to 
	apply the following patch to the Logtalk pre-processor: replace every 
	call of close(...) with fclose(...).


Open Prolog 1.1b5

	open.config

	Limited test done. Please report any problems that you may find.
	Don't forget to use the set_folder/1 predicate to set the working 
	directory before loading an example.


PrologII+ 4.5

	prologII.config

	Written and tested with the help of Claude Lai from PrologIA. You need
	to apply the following patches to the Logtalk pre-processor/runtime:
	Search and replace every instance of "quoted(true)" with "quoted(:true)";
	"open(File, write, Stream)" with "open(File, :write, Stream)",
	"catch(close(Stream), _, true)" with "catch(close(Stream), _, :true)",
	"open(File, read, Stream)" with "open(File, :read, Stream, [eof_action(eof_code)])".
	Remember that you need to use the set_import_dir/1 built-in predicate to
	set the working directory before loading an example.


QU-Prolog 4.3

	qu.config

	Not tested but no problems are expected.
	The predicates lgt_current_date/3 and lgt_current_time/3 have dummy 
	definitions. For most users, this will be no problem (some examples 
	may use lgt_current_date/3 to put a time stamp in new objects).


Quintus Prolog 3.3~3.4

	quintus.config

	Written and tested with help of a friend of mine, Paulo Urbano, for a 
	previous version. Adopted (but not tested) for the current release by
	using information available on-line in the internet. Don't forget to use 
	the unix(cd(Dir)) predicate to set the working directory before loading 
	an example. Supports smart compilation of source files.


SICStus Prolog 3.5~3.9.x

	sicstus35.config
	
	For versions 3.5, 3.6, and 3.7.
	The initialization/1 directive does not follow the ISO standard. In order
	to run the examples you have to edit the loader files and remove the
	call to the directive, leaving of course the logtalk_load/1 call. Also, 
	some library objects (like difflist) use the unify_with_occurs_check/2 ISO 
	predicate that the 3.5 version does not define. Don't forget to use 
	the working_directory/2 predicate to set the working directory before 
	loading an example. Supports smart compilation of source files.

	sicstus38.config
	
	For versions 3.8.x and 3.9.x. The config file sets the flag language to 
	iso, but that is only recomended and should not be needed to run Logtalk.
	No problems expected although not fully tested. Don't forget to use the 
	working_directory/2 predicate to set the working directory before loading 
	an example. Supports smart compilation of source files.


SWI Prolog 3.2.9 & 3.3.x and later versions

	swi329.config

	For version 3.2.9 (or older versions). Supports smart compilation of 
	source files.


	swi.config

	For version 3.3.x and later releases

	No problems expected. Please report any problem found (with a solution 
	if possible). Don't forget to use the cd/1 predicate to set the working 
	directory before loading an example. Supports smart compilation of 
	source files.



Trinc-Prolog R3

	trinc.config

	There is a conflict between Logtalk and Trinc-Prolog operators that 
	prevents the Logtalk pre-processor/runtime to compile without errors.
	Also, the definition of lgt_predicate_property/2 is fragile. Better
	support is needed from TP regarding predicate properties.


XSB Prolog 2.3~5

	xsb.config

	You need to rename both the config file and the Logtalk pre-processor to 
	end with a '.P' extension otherwise the (re)consult built-in predicate 
	will not find them!

	You also need to apply the following patchs to the Logtalk pre-processor/
	runtime:
	
	(1) open the file compiler/logtalk.pl, find the clause that reads: 
	
	lgt_current_object_(user, user0_, user0__dcl, user0__def, _).
	
	and replace it with the query:
	
	:- assertz(lgt_current_object_(user, user0_, user0__dcl, user0__def, _)).
	
	(2) you may get syntax errors while compiling the Logtalk pre-processor 
	or some of the examples due to a know bug in the XSB parsing of infix 
	operators: just add a space after the infix operator.

	The write() and writeq() predicates output code that in some instances 
	can not be readed back with read(). If you receive a syntax error while 
	loading a Logtalk compiled file we will have to fix the problem by 
	editing the file (the Prolog output, not the Logtalk source). Don't 
	forget to use the cd/1 predicate to set the working directory before 
	loading an example.


YAP 4.2.0 & 4.3.x

	yap420.config
	
	For version 4.2.0 (or older versions). Supports smart compilation of 
	source files.

	yap430.config

	For all 4.3.x versions.

	The predicates lgt_current_date/3 and lgt_current_time/3 have dummy 
	definitions. For most users, this will be no problem (some examples may 
	use lgt_current_date/3 only to put a time stamp in new objects). Don't 
	forget to use the cd/1 predicate to set the working directory before 
	loading an example. Supports smart compilation of source files.

