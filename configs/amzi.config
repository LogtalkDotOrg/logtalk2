%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%  Logtalk - Object oriented extension to Prolog
%  Release 2.17.0
%
%  configuration file for Amzi! Prolog 4.103, 5.0
%
%  last updated: April 8, 2004
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%  ISO Prolog Standard predicates that we must define because they are
%  not built-in
%
%  add a clause for lgt_iso_predicate/1 declaring each ISO predicate that
%  we must define; there must be at least one clause for this predicate
%  whose call should fail if we don't define any ISO predicates
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


initialization(Goal) :-
	call(Goal).



% '$lgt_iso_predicate'(?callable).

'$lgt_iso_predicate'(close(_)).
'$lgt_iso_predicate'(compound(_)).
'$lgt_iso_predicate'(copy_term(_, _)).
'$lgt_iso_predicate'(number_codes(_, _)).
'$lgt_iso_predicate'(open(_, _, _)).
'$lgt_iso_predicate'(read_term(_, _, _)).
'$lgt_iso_predicate'(write_canonical(_, _)).
'$lgt_iso_predicate'(write_term(_, _, _)).


close(Stream) :-
	fclose(Stream).


compound(Term) :-
	structure(Term).


copy_term(Term, Copy) :-
	asserta(lgt_copy_term_(Term)),
	retract(lgt_copy_term_(Copy)).


number_codes(Number, Codes) :-
	string_integer(String, Number),
	string_list(String, Codes).


open(File, read, Stream) :-
	fopen(Stream, File, r).

open(File, write, Stream) :-
	fopen(Stream, File, w).


read_term(Stream, Term, [singletons([])]) :-
	!,
	read(Stream, Term2),
	(Term2 = '!EOF' -> Term = end_of_file; Term = Term2).

read_term(Stream, Term, _) :-
	read(Stream, Term2),
	(Term2 = '!EOF' -> Term = end_of_file; Term = Term2).


write_canonical(Stream, Term) :-
	writeq(Stream, Term).


write_term(Stream, Term, [quoted(true)]) :-
	!,
	writeq(Stream, Term).

write_term(Stream, Term, _) :-
	write(Stream, Term).



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%  predicate properties
%
%  this predicate must return at least static, dynamic, and built_in 
%  properties for an existing predicate
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% '$lgt_predicate_property'(+callable, ?predicate_property)

'$lgt_predicate_property'(Predicate, built_in) :-
	builtin(Predicate).

'$lgt_predicate_property'(Predicate, static) :-
	is$code(Predicate, 1).

'$lgt_predicate_property'(Predicate, dynamic) :-
	functor(Predicate, Functor, Arity),
	current_predicate(Functor/Arity),
	\+ is$code(Predicate, _).


builtin(F/A) :- !, builtin(F, A).
builtin(T) :- functor(T, F, A), builtin(F, A).

builtin(!, 0).

builtin(\+, 2).

builtin(\=, 2).
builtin(=, 2).

builtin(=.., 2).

builtin(@=<, 2).
builtin(==, 2).
builtin(\==, 2).
builtin(@<, 2).
builtin(@>, 2).
builtin(@>=, 2).

builtin(=<, 2).
builtin(=:=, 2).
builtin(=\=, 2).
builtin(<, 2).
builtin(>, 2).
builtin(>=, 2).

builtin(-, 1).
builtin(-, 2).
builtin(+, 2).
builtin(*, 2).
builtin(/, 2).
builtin(//, 2).
builtin(mod, 2).
builtin(^, 2).
builtin(\, 1).
builtin(<<, 2).
builtin(>>, 2).

builtin(abolish, 1).
builtin(abolish, 2).
builtin(abort, 1).
builtin(add, 1).
builtin(arg, 3).
builtin(assert, 1).
builtin(asserta, 1).
builtin(assertz, 1).
builtin(atom, 1).
builtin(atom_codes, 2).
builtin(atomic, 1).
builtin(atom_concat, 3).
builtin(atom_length, 2).
builtin(atom_uplow, 2).
builtin(atomlist_concat, 2).
builtin(bagof, 3).
builtin(builtin, 1).
builtin(builtin, 2).
builtin(call, 1).
builtin(catch, 3).
builtin(clause, 2).
builtin(clause, 3).
builtin(closelog, 0).
builtin(cntr_dec, 2).
builtin(cntr_get, 2).
builtin(cntr_inc, 2).
builtin(cntr_set, 2).
builtin(command_line, 1).
builtin(compare, 3).
builtin(compare_lists,3).
builtin(consult, 1).
builtin(consult_ops, 1).
builtin(consult_project, 1).
builtin(current_atom, 1).
builtin(current_op, 3).
builtin(current_prolog_flag, 2).
builtin(current_predicate, 1).
builtin(current_streams, 3).
builtin(current_user, 3).
builtin(cut_tag, 1).
builtin(date, 3).
builtin(db_ref, 3).
builtin(defined, 1).
builtin(display, 1).
builtin(erase, 1).
builtin(eraseall, 1).
builtin(err_raise, 1).
builtin(expand_term, 2).
builtin(fail, 0).
builtin(fatalerrors, 0).
builtin(fatalerrors, 1).
builtin(fclose, 1).
builtin(fflush, 1).
builtin(fileerrors, 0).
builtin(fileerrors, 1).
builtin(file_exists, 1).
builtin(file_exists, 2).
builtin(findall, 3).
builtin(findfiles, 3).
builtin(float, 1).
builtin(flush_in, 0).
builtin(flush_out, 0).
builtin(fseek, 4).
builtin(fread, 3).
builtin(fwrite, 3).
builtin(functor, 3).
builtin(fopen, 3).
builtin(for, 4).
builtin(gc, 0).
builtin(gensym, 2).
builtin(get, 1).
builtin(get, 2).
builtin(get0, 1).
builtin(get0, 2).
builtin(get1, 1).
builtin(get1, 2).
builtin(get_mode, 2).
builtin(get_preds, 1).
builtin(halt, 0).
builtin(handle_name, 2).
builtin(help, 0).
builtin(help, 1).
builtin(keyb, 1).
builtin(integer, 1).
builtin(instance, 1).
builtin(is, 2).
builtin(islist, 1).
builtin(latent_exp, 0).
builtin(latent_opdef, 0).
builtin(lint, 0).
builtin(lint, 1).
builtin(list, 1).
builtin(listing, 0).
builtin(listing, 1).
builtin(load, 1).
builtin(long, 1).
builtin(nl, 0).
builtin(nl, 1).
builtin(nllog, 0).
builtin(nonblank_string, 1).
builtin(nofatalerrors, 0).
builtin(nofileerrors, 0).
builtin(nolint, 0).
builtin(nonvar, 1).
builtin(noprotect_db, 0).
builtin(not, 1).
builtin(number, 1).
builtin(numbervars, 3).
builtin(once, 1).
builtin(openlog, 1).
builtin(op, 3).
builtin(phrase, 2).
builtin(phrase, 3).
builtin(press_any_key, 0).
builtin(protect_db, 0).
builtin(protect_db, 1).
builtin(put, 1).
builtin(put, 2).
builtin(read, 1).
builtin(read, 2).
builtin(read_string, 1).
builtin(read_string, 2).
builtin(reconsult, 1).
builtin(reconsult_project, 1).
builtin(record, 3).
builtin(recorda, 3).
builtin(recordz, 3).
builtin(recorded, 3).
builtin(reload, 1).
builtin(remove_dups,2).
builtin(repeat, 0).
builtin(replace, 0).
builtin(respkey, 1).
builtin(retract, 1).
builtin(retractall, 1).
builtin(see, 1).
builtin(seeing, 1).
builtin(seen, 0).
builtin(seentold, 0).
builtin(seetell, 1).
builtin(setof, 3).
builtin(set_errors, 1).
builtin(set_mode, 2).
builtin(set_prolog_flag, 2).
builtin(short, 1).
builtin(skip, 1).
builtin(skip, 2).
builtin(sort, 2).
builtin(strcat, 3).
builtin(stream_type, 2).
builtin(string, 1).
builtin(string_atom, 2).
builtin(string_integer, 2).
builtin(string_length, 2).
builtin(string_list, 2).
builtin(string_term, 2).
builtin(stringlist_concat, 3).
builtin(structure, 1).
builtin(sub_atom, 4).
builtin(sub_string, 4).
builtin(substring, 4).
builtin(tab, 1).
builtin(tab, 2).
builtin(tell, 1).
builtin(telling, 1).
builtin(throw, 1).
builtin(told, 0).
builtin(unget0, 1).
builtin(unget0, 2).
builtin(unload, 1).
builtin(tab, 1).
builtin(tab, 2).
builtin(tag, 1).
builtin(tell, 1).
builtin(tell, 2).
builtin(telling, 1).
builtin(told, 0).
builtin(true, 0).
builtin(var, 1).
builtin(varlist, 1).
builtin(varsof, 2).
builtin(verbose, 0).
builtin(verbose, 1).
builtin(write, 1).
builtin(write, 2).
builtin(writelog, 1).
builtin(writeq, 1).
builtin(writeq, 2).



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%  metapredicates
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% forall(+callable, +callble)

forall(Generate, Test) :-
	\+ call((Generate, \+ call(Test))).


% lgt_call/2-8
%
% use these definitions only if your compiler does
% not provide call/1-8 as built-in predicates

'$lgt_call'(F, A) :-
	Call =.. [F, A],
	call(Call).


'$lgt_call'(F, A1, A2) :-
	Call =.. [F, A1, A2],
	call(Call).


'$lgt_call'(F, A1, A2, A3) :-
	Call =.. [F, A1, A2, A3],
	call(Call).


'$lgt_call'(F, A1, A2, A3, A4) :-
	Call =.. [F, A1, A2, A3, A4],
	call(Call).


'$lgt_call'(F, A1, A2, A3, A4, A5) :-
	Call =.. [F, A1, A2, A3, A4, A5],
	call(Call).


'$lgt_call'(F, A1, A2, A3, A4, A5, A6) :-
	Call =.. [F, A1, A2, A3, A4, A5, A6],
	call(Call).


'$lgt_call'(F, A1, A2, A3, A4, A5, A6, A7) :-
	Call =.. [F, A1, A2, A3, A4, A5, A6, A7],
	call(Call).


% lgt_once/2-8
%
% if your compiler provides call/1-8 as built-in 
% predicates rewrite these definitions using call(...), !.

'$lgt_once'(F, A) :-
	Call =.. [F, A],
	once(Call).


'$lgt_once'(F, A1, A2) :-
	Call =.. [F, A1, A2],
	once(Call).


'$lgt_once'(F, A1, A2, A3) :-
	Call =.. [F, A1, A2, A3],
	once(Call).


'$lgt_once'(F, A1, A2, A3, A4) :-
	Call =.. [F, A1, A2, A3, A4],
	once(Call).


'$lgt_once'(F, A1, A2, A3, A4, A5) :-
	Call =.. [F, A1, A2, A3, A4, A5],
	once(Call).


'$lgt_once'(F, A1, A2, A3, A4, A5, A6) :-
	Call =.. [F, A1, A2, A3, A4, A5, A6],
	once(Call).


'$lgt_once'(F, A1, A2, A3, A4, A5, A6, A7) :-
	Call =.. [F, A1, A2, A3, A4, A5, A6, A7],
	once(Call).



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%  Prolog built-in metapredicates
%
%  (excluding ISO Prolog Standard metapredicates)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% '$lgt_pl_metapredicate'(?callable).

'$lgt_pl_metapredicate'(_) :-
	fail.



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%  file extension predicates
%
%  these extensions are used by Logtalk load/compile predicates
%
%  you may want to change the extension for Prolog files to match 
%  the one expected by your Prolog compiler
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% '$lgt_file_extension'(?atom, ?atom)

'$lgt_file_extension'(logtalk, '.lgt').
'$lgt_file_extension'(prolog, '.pro').
'$lgt_file_extension'(xml, '.xml').



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%  default flag values
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% '$lgt_default_flag'(?atom, ?atom)
%
% default values for all flags

'$lgt_default_flag'(iso_initialization_dir, false).

'$lgt_default_flag'(xml, on).
'$lgt_default_flag'(xsl, 'lgtxml.xsl').
'$lgt_default_flag'(xmlspec, dtd).
'$lgt_default_flag'(doctype, local).

'$lgt_default_flag'(unknown, warning).
'$lgt_default_flag'(misspelt, warning).
'$lgt_default_flag'(singletons, warning).
'$lgt_default_flag'(lgtredef, warning).
'$lgt_default_flag'(plredef, silent).
'$lgt_default_flag'(portability, silent).

'$lgt_default_flag'(report, on).

'$lgt_default_flag'(smart_compilation, off).

'$lgt_default_flag'(startup_message, flags).

'$lgt_default_flag'(underscore_vars, singletons).

'$lgt_default_flag'(code_prefix, '').

'$lgt_default_flag'(debug, off).



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%  list predicates
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


'$lgt_append'([], List, List).
'$lgt_append'([Head| Tail], List, [Head| Tail2]) :-
	'$lgt_append'(Tail, List, Tail2).


'$lgt_member'(Head, [Head| _]).
'$lgt_member'(Head, [_| Tail]) :-
	'$lgt_member'(Head, Tail).


'$lgt_member_var'(V, [H| _]) :-
	V == H.
'$lgt_member_var'(V, [_| T]) :-
	'$lgt_member_var'(V, T).


'$lgt_proper_list'([]).
'$lgt_proper_list'([_| List]) :-
	'$lgt_proper_list'(List).



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%  file predicates
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% '$lgt_file_exists'(+atom)
%
% see if a file exist in the current directory

'$lgt_file_exists'(File) :-
	file_exists(File).


% '$lgt_load_prolog_code'(+atom)
%
% compile and load a Prolog file

'$lgt_load_prolog_code'(File) :-
	reconsult(File).


% '$lgt_compare_file_mtimes'(?atom, +atom, +atom)
%
% compare file modification times

'$lgt_compare_file_mtimes'(_, _, _) :-
	fail.



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%  sorting predicates
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% '$lgt_keysort'(+list, -list)

'$lgt_keysort'(List, Sorted) :-
	throw(error(not_implemented, keysort/2)).


% '$lgt_sort'(+list, -list)

'$lgt_sort'(List, Sorted) :-
	sort(List, Sorted).



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%  time and date predicates
%
%  if your Prolog compiler does not provide access to the operating system 
%  time and date just write dummy definitions
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% '$lgt_current_date'(?Year, ?Month, ?Day)

'$lgt_current_date'(Year, Month, Day) :-
	date(Month, Day, Year).


% '$lgt_current_time'(?Hours, ?Mins, ?Secs)

'$lgt_current_time'(Hours, Mins, Secs) :-
	time(Hours, Mins, Secs).



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%  timing predicate
%
%  if your Prolog compiler does not provide access to a timing predicate 
%  just write dummy definition
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% '$lgt_cpu_time'(-Seconds)


'$lgt_cpu_time'(Seconds) :-
	Seconds is cputime.



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%  comparison predicate
%
%  the usual compare/3 definition
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% compare(Order, Term1, Term2) -- built-in



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%  read character predicate
%
%  read a single character echoing it and writing a newline after
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


'$lgt_read_single_char'(Char) :-
	respkey(Code), nl, name(Char, [Code]), flush_in.


'$lgt_is_newline_char_code'(10).
'$lgt_is_newline_char_code'(13).



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%  end!
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
